import os
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import asyncio

# –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
TRON_API_KEY = os.getenv("TRON_API_KEY")

DB_PATH = os.getenv("DB_PATH", "bot.db")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS persons (name TEXT PRIMARY KEY)")
cursor.execute("CREATE TABLE IF NOT EXISTS wallets (wallet TEXT PRIMARY KEY, name TEXT, chain TEXT)")
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/addperson <–ò–º—è>\n"
                         "/addwallet <–ò–º—è> <–ö–æ—à–µ–ª—ë–∫> <CHAIN: ETH/TRON>\n"
                         "/check <–ò–º—è1> <–ò–º—è2> <TOKEN> [days=30] [chain=ALL]")

@dp.message(Command("addperson"))
async def add_person(message: Message):
    try:
        _, name = message.text.split()
        cursor.execute("INSERT OR IGNORE INTO persons (name) VALUES (?)", (name,))
        conn.commit()
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /addperson –ò–º—è")

@dp.message(Command("addwallet"))
async def add_wallet(message: Message):
    try:
        _, name, wallet, chain = message.text.split()
        cursor.execute("INSERT OR REPLACE INTO wallets (wallet, name, chain) VALUES (?, ?, ?)", (wallet, name, chain.upper()))
        conn.commit()
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—à–µ–ª—ë–∫ {wallet} –¥–ª—è {name} ({chain.upper()})")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /addwallet –ò–º—è –ö–æ—à–µ–ª—ë–∫ ETH/TRON")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@dp.message(Command("check"))
async def check(message: Message):
    await message.answer("üîç –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Etherscan/TronGrid.")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
